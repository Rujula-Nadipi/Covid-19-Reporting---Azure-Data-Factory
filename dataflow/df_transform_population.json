{
	"name": "df_transform_population",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_population_tsv",
						"type": "DatasetReference"
					},
					"name": "PopulationSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_population",
						"type": "DatasetReference"
					},
					"name": "Sink"
				}
			],
			"transformations": [
				{
					"name": "Select2019And2021"
				},
				{
					"name": "DeriveGeoOut"
				},
				{
					"name": "LookupCountry"
				},
				{
					"name": "SelectReqCols"
				},
				{
					"name": "PivotAgeOnYear"
				},
				{
					"name": "SelectToChangeNames"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {indic_de,geo\\time} as string,",
				"          {2011 } as float,",
				"          {2012 } as double,",
				"          {2013 } as double,",
				"          {2014 } as double,",
				"          {2015 } as string,",
				"          {2016 } as string,",
				"          {2017 } as string,",
				"          {2018 } as string,",
				"          {2019 } as double,",
				"          {2020 } as double,",
				"          {2021 } as double,",
				"          {2022 } as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PopulationSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLookup",
				"PopulationSource select(mapColumn(",
				"          indic_de_geo_time = {indic_de,geo\\time},",
				"          col_2020 = {2020 }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select2019And2021",
				"Select2019And2021 derive(age = split(indic_de_geo_time, ',')[1],",
				"          country_code_2_digit = substring(split(indic_de_geo_time, ',')[2] ,1, 2)) ~> DeriveGeoOut",
				"DeriveGeoOut, CountryLookup lookup(DeriveGeoOut@country_code_2_digit == CountryLookup@country_code_2_digit,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountry",
				"LookupCountry select(mapColumn(",
				"          country,",
				"          country_code_2_digit = DeriveGeoOut@country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          col_2020,",
				"          age",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReqCols",
				"SelectReqCols pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population),",
				"     pivotBy(age, ['PC_Y0_14', 'PC_Y15_24', 'PC_Y25_49', 'PC_Y50_64', 'PC_Y65_79', 'PC_Y80_MAX']),",
				"     age_group = sum(col_2020),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> PivotAgeOnYear",
				"PivotAgeOnYear select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          age_group_0_14 = age_group_PC_Y0_14,",
				"          age_group_15_24 = age_group_PC_Y15_24,",
				"          age_group_25_49 = age_group_PC_Y25_49,",
				"          age_group_50_64 = age_group_PC_Y50_64,",
				"          age_group_65_79 = age_group_PC_Y65_79,",
				"          age_group_80_MAX = age_group_PC_Y80_MAX",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectToChangeNames",
				"SelectToChangeNames sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['population.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Sink"
			]
		}
	}
}