{
	"name": "df_transform_testing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_testing",
						"type": "DatasetReference"
					},
					"name": "TestingDataSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "countryLookUp"
				},
				{
					"dataset": {
						"referenceName": "ds_hospital_admission_dates_lookup",
						"type": "DatasetReference"
					},
					"name": "dimdatelookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_proceseed_testing_csv",
						"type": "DatasetReference"
					},
					"name": "SinkTestingData"
				}
			],
			"transformations": [
				{
					"name": "LookupForCountrycode"
				},
				{
					"name": "selectReqFields"
				},
				{
					"name": "SelectreqFields2"
				},
				{
					"name": "JoinDimDate"
				},
				{
					"name": "DeriveYearWeek"
				},
				{
					"name": "AggregateDates"
				},
				{
					"name": "SelectforSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          new_cases as integer,",
				"          tests_done as integer,",
				"          population as integer,",
				"          testing_rate as double,",
				"          positivity_rate as double,",
				"          testing_data_source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TestingDataSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryLookUp",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimdatelookup",
				"TestingDataSource, selectReqFields lookup(TestingDataSource@country == selectReqFields@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupForCountrycode",
				"countryLookUp select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqFields",
				"LookupForCountrycode select(mapColumn(",
				"          country = TestingDataSource@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          year_week,",
				"          new_cases,",
				"          tests_done,",
				"          population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectreqFields2",
				"SelectreqFields2, AggregateDates join(year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinDimDate",
				"dimdatelookup derive(ecdc_year_week = year + \"-W\" + lpad(week_of_year, 2, \"0\")) ~> DeriveYearWeek",
				"DeriveYearWeek aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggregateDates",
				"JoinDimDate select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          year_week,",
				"          week_start_date,",
				"          week_end_date,",
				"          new_cases,",
				"          tests_done,",
				"          population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectforSink",
				"SelectforSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          year_week as string,",
				"          week_start_date as string,",
				"          week_end_date as string,",
				"          new_cases as string,",
				"          tests_done as string,",
				"          population as string,",
				"          testing_rate as string,",
				"          positivity_rate as string,",
				"          testing_data_source as string",
				"     ),",
				"     partitionFileNames:['testing.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          year_week,",
				"          week_start_date,",
				"          week_end_date,",
				"          new_cases,",
				"          tests_done,",
				"          population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source",
				"     ),",
				"     partitionBy('hash', 1)) ~> SinkTestingData"
			]
		}
	}
}